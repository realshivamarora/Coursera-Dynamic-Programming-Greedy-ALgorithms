Problem 1:
Problem A:

def compute_makespan(times, m, assign):
    total_times = [0] * m 
    
    for i in range(len(times)):
        total_times[assign[i]] += times[i] 
    
    return max(total_times)

## BEGIN TESTS
print('Test 1 ... ', end = '')
times = [2, 2, 2, 2, 3, 3, 2]
assigns = [0, 0, 0, 0, 1, 1, 2]
m = 3
s = compute_makespan(times, m, assigns)
assert s == 8, f'Expected makespan is 8, your code returned: {s}'
print(' passed!')

print('Test 2 ...', end='')
times = [2, 1, 2, 2, 1, 3, 2, 1, 1, 3]
assigns = [0, 1, 0, 1, 0, 1, 0, 1, 0, 1]
m = 3
s = compute_makespan(times, m, assigns)
assert s == 10, f' Expected makespan is 10, your code returned {s}'
print('  passed!')
print('Tests passed: 10 points!')

## END TESTS


Problem B:

import heapq

def greedy_makespan_min(times, m):
    assert len(times) >= 1
    assert all(elt >= 0 for elt in times)
    assert m >= 2
    
    n = len(times)
    assignment = [0] * n
    total_times = [0] * m
    
    pq = [(0, i) for i in range(m)]
    heapq.heapify(pq)
    
    for i, job_time in enumerate(times):
        total_time, processor = heapq.heappop(pq)  
        total_times[processor] += job_time  
        assignment[i] = processor 
        heapq.heappush(pq, (total_times[processor], processor))  
    makespan = max(total_times)  
    
    return assignment, makespan

## BEGIN TESTS
def do_test(times, m, expected):
    (a, makespan) = greedy_makespan_min(times,m )
    print('\t Assignment returned: ', a)
    print('\t Claimed makespan: ', makespan)
    assert compute_makespan(times, m, a) == makespan, 'Assignment returned is not consistent with the reported makespan'
    assert makespan == expected, f'Expected makespan should be {expected}, your core returned {makespan}'
    print('Passed')
print('Test 1:')
times = [2, 2, 2, 2, 2, 2, 2, 2, 3] 
m = 3
expected = 7
do_test(times, m, expected)

print('Test 2:')
times = [1]*20 + [5]
m = 5
expected =9
do_test(times, m, expected)

print('Test 3:')
times = [1]*40 + [2]
m = 20
expected = 4
do_test(times, m, expected)
print('All tests passed: 15 points!')
## END TESTS
